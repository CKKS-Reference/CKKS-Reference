#include <stdio.h>

void convert_poly_to_binarytreeform(double* c, int N){
	if(N==2) return;
	for(int i=1;i<N/2;i++){
		c[N/2-i]-=c[N/2+i];
		c[N/2+i]*=2;
	}
	convert_poly_to_binarytreeform(c    ,N/2);
	convert_poly_to_binarytreeform(c+N/2,N/2);
}

int main(){
	//---------------------------------------------------------------------
	// p(x)=sum(c[i]*T_i(x/6),i,0,N-1) is a polynomial approximation of
	//  sin(%pi*x)/%pi on [-6,6] with error bound 1.28E-6
	//
	// q(x)=sum(d[i]*T_i(x/6),i,0,N-1) is a polynomial approximation of
	//  cos(%pi*x) on [-6,6] with error bound 1.71E-5
	//---------------------------------------------------------------------
	const int N=64;
	double c[]={-4.09661164603151497413e-14, -5.79208551862765083640e-02, -9.74067272389563693186e-14, -5.14088889809595286917e-02, -1.22659073105168071673e-13, -3.66486867432270074785e-02, -1.23217500744241038936e-13, -1.14139764534689994863e-02, -1.25232072300735681497e-13, 2.40312690951702684350e-02, -9.30794974255576434161e-14, 6.22506344580614212614e-02, -4.00748770476417640605e-14, 8.49870770190162133639e-02, 2.89028388550605430128e-14, 6.79795820820322388434e-02, 1.24224580384423135498e-13, 2.62396687748335955687e-03, 2.74408048767750065565e-13, -7.31609393813145436614e-02, 3.88989023460412037818e-13, -7.91206649377356324715e-02, 4.96883428123140922732e-13, 1.72033295337615035892e-02, 5.11810345113634819606e-13, 9.55571045414772418658e-02, 3.93117653868213907791e-13, 5.62721331652101235815e-03, 1.75707756910523896571e-13, -1.03193636038934610788e-01, -1.69654742097844279607e-13, 3.28920460334100397959e-02, -7.90002444691366942016e-13, 8.62167805694609157285e-02, -1.30968982396037426980e-12, -1.29384794002985553663e-01, -1.53315871141614355320e-12, 1.01160902436212840616e-01, -1.52543368500771531765e-12, -5.57946895689440530708e-02, -1.25120005661429651351e-12, 2.39602039387557252947e-02, -7.84441641700121009374e-13, -8.42100390158955630637e-03, -4.56637798157635225847e-13, 2.49759677100785297890e-03, 7.64786156564131625240e-14, -6.38421539648091206261e-04, 7.93283493894935256585e-13, 1.42844096828415148591e-04, 1.61611478243677517011e-12, -2.83146276555646990512e-05, 3.01571335294296179907e-12, 5.02052408373292051083e-06, 4.56170282532039905505e-12, -8.02666306175251878437e-07, 5.42290588221118812087e-12, 1.16497729618066413875e-07, 5.74707375904921717358e-12, -1.54304234102727816701e-08, 4.58848568883109102892e-12, 1.88009593325678710496e-09, 1.88620862062767021087e-12, -2.1164013073e-10};
	double d[]={9.15790575476520263276e-02, 3.21884396690643564790e-16, 1.92811590959670708934e-01, -1.42991608853149222027e-16, 2.18516035450105450266e-01, 2.82509876104272346465e-16, 2.49056607736033164269e-01, 1.15074109571466758936e-16, 2.62372913598278523217e-01, 1.36116339719457916407e-17, 2.26326009955375634375e-01, -5.54153340030881174882e-16, 1.12199846782108716980e-01, 7.68031261486747755935e-17, -7.19388200924999665631e-02, 2.37654806000112973452e-16, -2.41887775297427609633e-01, -1.17221891859028440312e-16, -2.49322348116478437197e-01, 5.03059148134134012719e-16, -1.76460400746380648151e-02, 6.67513489155853527584e-18, 2.59276287208975497744e-01, -6.67849678331382040623e-16, 1.93330190664634193887e-01, 3.17663380029446206943e-17, -2.04824411589801608224e-01, -3.27694851612084019952e-16, -2.30146871512672601678e-01, 1.29413167570442087094e-16, 2.68622369342252365065e-01, 7.38646692991146412774e-17, 9.86801315005328832930e-02, -7.62997516707641928043e-17, -3.75512161637203134568e-01, -7.17356547696784646897e-17, 3.79232470038155244918e-01, 7.43015271094747569342e-17, -2.44593094994635246175e-01, 1.21041738574313377597e-16, 1.18072387195492331524e-01, 1.89464636347368495904e-17, -4.56556730596654261611e-02, -1.30626821784852471292e-16, 1.46948548972937447638e-02, -1.17942537629588533880e-16, -4.03712088596536698704e-03, -7.93718457558297673053e-17, 9.63847844505767172539e-04, 6.68564301715163370575e-17, -2.02712269488842746932e-04, 3.42841287095195711451e-16, 3.79620863970777245710e-05, 3.92938805711082424090e-16, -6.38584438224826130671e-06, 4.32023564765176782846e-16, 9.71976203103388143001e-07, -1.47449713289373923449e-16, -1.34697200119201215485e-07, -4.75915616207876455665e-16, 1.70864642534939660985e-08, -1.75386421160269788314e-16, -2.01498728813840688272e-09, -2.6436895657e-18};


	//---------------------------------------------------------------------
	// convert the coefficients to the binary-tree evaluation form
	//--------------------------------------------------------------------
	convert_poly_to_binarytreeform(c,N);
	printf("c=[");
	for(int i=0;i<N;i++){
		if(i<N-1) printf("%1.20e, "  , c[i]);
		else      printf("%1.20e];\n", c[i]);
	}

	convert_poly_to_binarytreeform(d,N);
	printf("d=[");
	for(int i=0;i<N;i++){
		if(i<N-1) printf("%1.20e, "  , d[i]);
		else      printf("%1.20e];\n", d[i]);
	}
}